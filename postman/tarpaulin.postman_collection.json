{
	"info": {
		"_postman_id": "3df942d4-dcc0-411e-b061-a16828a83366",
		"name": "tarpaulin",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "43962388",
		"_collection_link": "https://tongxinsun.postman.co/workspace/Tongxin-Sun's-Workspace~2ea60111-daf7-452a-8363-ccfd8f50e08f/collection/43962388-3df942d4-dcc0-411e-b061-a16828a83366?action=share&source=collection_link&creator=43962388"
	},
	"item": [
		{
			"name": "1 user login",
			"item": [
				{
					"name": "1. admin1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"admin1_jwt\", respJSON[\"token\"]);\r",
									"pm.environment.set(\"admin1_sub\", get_sub(respJSON[\"token\"])) \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"    pm.expect(respJSON.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"token has valid JWT structure\", function () {\r",
									"    const tokenParts = respJSON.token.split(\".\");\r",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT has 3 parts\r",
									"});\r",
									"\r",
									"pm.test(\"token contains expected sub claim\", function () {\r",
									"    const get_payload = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii')));\r",
									"    const payload = get_payload(respJSON[\"token\"]);\r",
									"    pm.expect(payload).to.have.property(\"sub\"); // user id\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{admin1_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "2. instructor1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"instructor1_jwt\", respJSON[\"token\"]);\r",
									"pm.environment.set(\"instructor1_sub\", get_sub(respJSON[\"token\"])) \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"    pm.expect(respJSON.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"token has valid JWT structure\", function () {\r",
									"    const tokenParts = respJSON.token.split(\".\");\r",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT has 3 parts\r",
									"});\r",
									"\r",
									"pm.test(\"token contains expected sub claim\", function () {\r",
									"    const get_payload = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii')));\r",
									"    const payload = get_payload(respJSON[\"token\"]);\r",
									"    pm.expect(payload).to.have.property(\"sub\"); // user id\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{instructor1_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "3. instructor2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"instructor2_jwt\", respJSON[\"token\"]);\r",
									"pm.environment.set(\"instructor2_sub\", get_sub(respJSON[\"token\"])) \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"    pm.expect(respJSON.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"token has valid JWT structure\", function () {\r",
									"    const tokenParts = respJSON.token.split(\".\");\r",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT has 3 parts\r",
									"});\r",
									"\r",
									"pm.test(\"token contains expected sub claim\", function () {\r",
									"    const get_payload = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii')));\r",
									"    const payload = get_payload(respJSON[\"token\"]);\r",
									"    pm.expect(payload).to.have.property(\"sub\"); // user id\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{instructor2_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "4. student1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"student1_jwt\", respJSON[\"token\"]);\r",
									"pm.environment.set(\"student1_sub\", get_sub(respJSON[\"token\"])) \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"    pm.expect(respJSON.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"token has valid JWT structure\", function () {\r",
									"    const tokenParts = respJSON.token.split(\".\");\r",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT has 3 parts\r",
									"});\r",
									"\r",
									"pm.test(\"token contains expected sub claim\", function () {\r",
									"    const get_payload = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii')));\r",
									"    const payload = get_payload(respJSON[\"token\"]);\r",
									"    pm.expect(payload).to.have.property(\"sub\"); // user id\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{student1_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "5. student2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"student2_jwt\", respJSON[\"token\"]);\r",
									"pm.environment.set(\"student2_sub\", get_sub(respJSON[\"token\"])) \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"    pm.expect(respJSON.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"token has valid JWT structure\", function () {\r",
									"    const tokenParts = respJSON.token.split(\".\");\r",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT has 3 parts\r",
									"});\r",
									"\r",
									"pm.test(\"token contains expected sub claim\", function () {\r",
									"    const get_payload = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii')));\r",
									"    const payload = get_payload(respJSON[\"token\"]);\r",
									"    pm.expect(payload).to.have.property(\"sub\"); // user id\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{student2_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "6. student3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"student3_jwt\", respJSON[\"token\"]);\r",
									"pm.environment.set(\"student3_sub\", get_sub(respJSON[\"token\"])) \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"    pm.expect(respJSON.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"token has valid JWT structure\", function () {\r",
									"    const tokenParts = respJSON.token.split(\".\");\r",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT has 3 parts\r",
									"});\r",
									"\r",
									"pm.test(\"token contains expected sub claim\", function () {\r",
									"    const get_payload = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii')));\r",
									"    const payload = get_payload(respJSON[\"token\"]);\r",
									"    pm.expect(payload).to.have.property(\"sub\"); // user id\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{student3_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "7. student4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"student4_jwt\", respJSON[\"token\"]);\r",
									"pm.environment.set(\"student4_sub\", get_sub(respJSON[\"token\"])) \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"    pm.expect(respJSON.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"token has valid JWT structure\", function () {\r",
									"    const tokenParts = respJSON.token.split(\".\");\r",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT has 3 parts\r",
									"});\r",
									"\r",
									"pm.test(\"token contains expected sub claim\", function () {\r",
									"    const get_payload = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii')));\r",
									"    const payload = get_payload(respJSON[\"token\"]);\r",
									"    pm.expect(payload).to.have.property(\"sub\"); // user id\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{student4_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "8. student5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"student5_jwt\", respJSON[\"token\"]);\r",
									"pm.environment.set(\"student5_sub\", get_sub(respJSON[\"token\"])) \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"    pm.expect(respJSON.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"token has valid JWT structure\", function () {\r",
									"    const tokenParts = respJSON.token.split(\".\");\r",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT has 3 parts\r",
									"});\r",
									"\r",
									"pm.test(\"token contains expected sub claim\", function () {\r",
									"    const get_payload = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii')));\r",
									"    const payload = get_payload(respJSON[\"token\"]);\r",
									"    pm.expect(payload).to.have.property(\"sub\"); // user id\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{student5_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "9. student6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"student6_jwt\", respJSON[\"token\"]);\r",
									"pm.environment.set(\"student6_sub\", get_sub(respJSON[\"token\"])) \r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"    pm.expect(respJSON.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"token has valid JWT structure\", function () {\r",
									"    const tokenParts = respJSON.token.split(\".\");\r",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT has 3 parts\r",
									"});\r",
									"\r",
									"pm.test(\"token contains expected sub claim\", function () {\r",
									"    const get_payload = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii')));\r",
									"    const payload = get_payload(respJSON[\"token\"]);\r",
									"    pm.expect(payload).to.have.property(\"sub\"); // user id\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{student6_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "10. invalid body 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    pm.expect(respJSON).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error key exists\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"Error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\": \"{{student6_username}}\",\r\n\t\"passwordd\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				},
				{
					"name": "11. invalid creds 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respJSON = pm.response.json();\r",
									"\r",
									"let points = 0; \r",
									"\r",
									"pm.test(\"401 status code (0.25 pts)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    points += 0.25\r",
									"});\r",
									"\r",
									"pm.test(\"401 error message (0.25 pts)\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized\");\r",
									"     points += 0.25\r",
									"});\r",
									"\r",
									"console.log('******* User login Test 11 points = ' + points);\r",
									"let points_login = pm.environment.get('points_login') + points;\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('User login Tests total points = ' + points_login);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_login\", points_login);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"username\":  \"{{invalid_username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/users/login"
					},
					"response": []
				}
			]
		},
		{
			"name": "2 all users",
			"item": [
				{
					"name": "1. all users 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const respJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"9 users\", function(){\r",
									"    pm.expect(respJSON.length).to.equal(9);\r",
									"})\r",
									"\r",
									"pm.test(\"Each has 3 properties\", function(){\r",
									"    pm.expect(respJSON.filter(x => Object.keys(x).length === 3).length).to.equal(9);\r",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('id')).length).to.equal(9);\r",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('role')).length).to.equal(9);\r",
									"    pm.expect(respJSON.filter(x => Object.keys(x).includes('sub')).length).to.equal(9);\r",
									"})\r",
									"\r",
									"const admin = respJSON.filter((x) => x.role === 'admin')[0];\r",
									"pm.test(\"sub value of admin in database matches sub in jwt\", function() {\r",
									"    pm.expect(admin.sub).to.equal(pm.environment.get('admin1_sub'));\r",
									"    pm.environment.set(\"admin1_id\", admin.id);\r",
									"})\r",
									"\r",
									"const instructors = respJSON.filter((x) => x.role === 'instructor');\r",
									"pm.test(\"sub values of instructors in database matches sub in jwts\", function() {\r",
									"    pm.expect(instructors.length).to.equal(2);\r",
									"    for(let i = 1; i <= 2; i++){\r",
									"        const instructor_i = instructors.filter(x => x.sub === pm.environment.get('instructor' + i + '_sub'))[0];\r",
									"        pm.expect(instructor_i.sub).to.equal(pm.environment.get('instructor' + i + '_sub'));\r",
									"        pm.environment.set('instructor' + i + '_id', instructor_i.id);\r",
									"    } \r",
									"})\r",
									"\r",
									"const students = respJSON.filter((x) => x.role === 'student');\r",
									"pm.test(\"sub values of students in database matches sub in jwts\", function() {\r",
									"    pm.expect(students.length).to.equal(6);\r",
									"    for(let i = 1; i <= 6; i++){\r",
									"        const student_i = students.filter(x => x.sub === pm.environment.get('student' + i + '_sub'))[0];\r",
									"        pm.expect(student_i.sub).to.equal(pm.environment.get('student' + i + '_sub'));\r",
									"        pm.environment.set('student' + i + '_id', student_i.id);\r",
									"    }  \r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users"
					},
					"response": []
				},
				{
					"name": "2. all users 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalid_password}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users"
					},
					"response": []
				},
				{
					"name": "3. all users 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"403 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You don't have permission on this resource\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{instructor1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users"
					},
					"response": []
				}
			]
		},
		{
			"name": "3a get a user - basic",
			"item": [
				{
					"name": "1. get admin1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"admin user has either 3 or 4 properties\", function(){\r",
									"    const respJSON = pm.response.json()\r",
									"    pm.expect(Object.keys(respJSON).length).to.be.within(3,4);\r",
									"    pm.expect(respJSON['id']).to.equal(pm.environment.get('admin1_id'));\r",
									"    pm.expect(respJSON['sub']).to.equal(pm.environment.get('admin1_sub'));\r",
									"    pm.expect(respJSON['role']).to.equal('admin');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{admin1_id}}"
					},
					"response": []
				},
				{
					"name": "2. get instructor1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"an instructor has either 4 or 5 properties\", function(){\r",
									"    const respJSON = pm.response.json()\r",
									"    pm.expect(Object.keys(respJSON).length).to.be.within(4,5)\r",
									"    pm.expect(respJSON['id']).to.equal(pm.environment.get('instructor1_id'));\r",
									"    pm.expect(respJSON['sub']).to.equal(pm.environment.get('instructor1_sub'));\r",
									"    pm.expect(respJSON['role']).to.equal('instructor');\r",
									"    pm.expect(Object.keys(respJSON).includes('courses')).to.be.true;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{instructor1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{instructor1_id}}"
					},
					"response": []
				},
				{
					"name": "3. get student1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"a student has either 4 or 5 properties\", function(){\r",
									"    const respJSON = pm.response.json()\r",
									"    pm.expect(Object.keys(respJSON).length).to.be.within(4,5);\r",
									"    pm.expect(respJSON['id']).to.equal(pm.environment.get('student1_id'));\r",
									"    pm.expect(respJSON['sub']).to.equal(pm.environment.get('student1_sub'));\r",
									"    pm.expect(respJSON['role']).to.equal('student');\r",
									"    pm.expect(Object.keys(respJSON).includes('courses')).to.be.true;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}"
					},
					"response": []
				},
				{
					"name": "4. get a user 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalid_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}"
					},
					"response": []
				},
				{
					"name": "5. get a user 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"403 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You don't have permission on this resource\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student2_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "3b, 4 create avatar",
			"item": [
				{
					"name": "1. create/update avatar student_1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"the response has the avatar_url\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).length).to.equal(1);\r",
									"    pm.expect(respJSON['avatar_url']).to.equal(\r",
									"        pm.environment.get('app_url') + '/users/' + \r",
									"        pm.environment.get('student1_id') + '/avatar')\r",
									"})\r",
									"\r",
									"var template = `\r",
									"<canvas id=\"avatarChart\" height=\"75\"></canvas>\r",
									"\r",
									"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
									"\r",
									"<script>\r",
									"    var ctx = document.getElementById(\"avatarChart\");\r",
									"\r",
									"    var avatarChart = new Chart(ctx, {\r",
									"        type: \"bar\",\r",
									"        data: {\r",
									"            labels: [\"Avatar URL\"],\r",
									"            datasets: [{\r",
									"                data: [0],\r",
									"                \r",
									"                // Change these colours to customize the chart\r",
									"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\"],\r",
									"            }]\r",
									"        },\r",
									"        options: {\r",
									"            legend: { display: false },\r",
									"            title: {\r",
									"                display: true,\r",
									"                text: 'Avatar URL'\r",
									"            },\r",
									"            scales: {\r",
									"                xAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'URL'\r",
									"                    }\r",
									"                }],\r",
									"                yAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Count'\r",
									"                    }\r",
									"                }]\r",
									"            }\r",
									"        }\r",
									"\r",
									"    });\r",
									"\r",
									"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
									"    // code of the Visualizer template\r",
									"    pm.getData(function (err, value) {\r",
									"        avatarChart.data.datasets[0].data = [1];\r",
									"        avatarChart.data.labels = [value.response.avatar_url];\r",
									"        avatarChart.update();\r",
									"    });\r",
									"\r",
									"</script>`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var res = pm.response.json();\r",
									"    \r",
									"    var visualizerData = {\r",
									"        \r",
									"        // Labels take an array of strings\r",
									"        avatar_url: res.avatar_url,\r",
									"    };\r",
									"\r",
									"    return {response: visualizerData};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/yifanzhang/tongxinSun/CS 493/Tarpaulin/tarpaulin-lms/app/photos/student1.png"
								}
							]
						},
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "2. student1 has avatar_url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"student1 has an avatar URL\", function(){\r",
									"    const respJSON = pm.response.json();    \r",
									"    pm.expect(respJSON['avatar_url']).to.equal(\r",
									"        pm.environment.get('app_url') + '/users/' + \r",
									"        pm.environment.get('student1_id') + '/avatar');\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}"
					},
					"response": []
				},
				{
					"name": "3. update avatar student_1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"the response has the avatar_url\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).length).to.equal(1);\r",
									"    pm.expect(respJSON['avatar_url']).to.equal(\r",
									"        pm.environment.get('app_url') + '/users/' + \r",
									"        pm.environment.get('student1_id') + '/avatar')\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/yifanzhang/tongxinSun/CS 493/Tarpaulin/tarpaulin-lms/app/photos/student1.png"
								}
							]
						},
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "4. post avatar 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"error message is correct\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).length).to.equal(1);\r",
									"    pm.expect(respJSON[\"Error\"]).to.equal(\"The request body is invalid\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file_name",
									"type": "file",
									"src": []
								}
							]
						},
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "5. post avatar 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalid_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/yifanzhang/tongxinSun/CS 493/Tarpaulin/tarpaulin-lms/app/photos/student1.png"
								}
							]
						},
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "6. post avatar 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"error message is correct\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).length).to.equal(1);\r",
									"    pm.expect(respJSON['Error']).to.equal(\"You don't have permission on this resource\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/yifanzhang/tongxinSun/CS 493/Tarpaulin/tarpaulin-lms/app/photos/student1.png"
								}
							]
						},
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				}
			]
		},
		{
			"name": "5. get user's avatar",
			"item": [
				{
					"name": "1. get avatar 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "2. get avatar 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalid_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "3. get avatar 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"error message is correct\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).length).to.equal(1);\r",
									"    pm.expect(respJSON['Error']).to.equal(\"You don't have permission on this resource\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "4. get avatar 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"error message is correct\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).length).to.equal(1);\r",
									"    pm.expect(respJSON['Error']).to.equal(\"Not found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{instructor2_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{app_url}}/users/{{instructor2_id}}/avatar"
					},
					"response": []
				}
			]
		},
		{
			"name": "3b, 6 delete avatar",
			"item": [
				{
					"name": "1. delete avatar 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"error message is correct\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).length).to.equal(1);\r",
									"    pm.expect(respJSON[\"Error\"]).to.equal(\"Unauthorized\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalid_jwt}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "2. delete avatar 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "3. student1 no avatar_url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"student1 no longer has an avatar URL\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).includes('avatar_url')).to.be.false;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}"
					},
					"response": []
				},
				{
					"name": "4. delete avatar 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"error message is correct\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).length).to.equal(1);\r",
									"    pm.expect(respJSON['Error']).to.equal(\"You don't have permission on this resource\")\r",
									"})\r",
									"\r",
									"\r",
									"console.log('******* Avatar Delete Test 4 points = ' + points);\r",
									"let points_avatar_delete = pm.environment.get('points_avatar_delete') + points;\r",
									"console.log('******* Avatar Delete Tests current points = ' + points_avatar_delete);\r",
									"pm.environment.set(\"points_avatar_delete\", points_avatar_delete);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				},
				{
					"name": "5. delete avatar 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"error message is correct\", function(){\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(Object.keys(respJSON).length).to.equal(1);\r",
									"    pm.expect(respJSON['Error']).to.equal(\"Not found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}/avatar"
					},
					"response": []
				}
			]
		},
		{
			"name": "7, 3c. create a course",
			"item": [
				{
					"name": "1. create 1st course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"course1_id\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"CS\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(493);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Cloud Application Development\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor1_id'));\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"CS\",\r\n  \"number\": 493,\r\n  \"title\": \"Cloud Application Development\",\r\n  \"term\": \"fall-24\",\r\n  \"instructor_id\": {{instructor1_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "2. create course 400 missing prop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"CS\",\r\n  \"number\": 493,\r\n  \"title\": \"Cloud Application Development\",\r\n  \"instructor_id\": {{instructor1_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "3. create course 400 invalid instructor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"CS\",\r\n  \"number\": 493,\r\n  \"title\": \"Cloud Application Development\",\r\n  \"term\": \"fall-24\",\r\n  \"instructor_id\": {{student1_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "4. create course 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalid_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"CS\",\r\n  \"number\": 493,\r\n  \"title\": \"Cloud Application Development\",\r\n  \"instructor_id\": {{instructor1_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "5. create course 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"403 error message\", function () {\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You don't have permission on this resource\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{instructor1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"CS\",\r\n  \"number\": 493,\r\n  \"title\": \"Cloud Application Development\",\r\n  \"term\": \"fall-24\",\r\n  \"instructor_id\": {{instructor1_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "6. create 2nd course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"course2_id\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"CS\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(492);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Mobile App Development\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor1_id'));\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"CS\",\r\n  \"number\": 492,\r\n  \"title\": \"Mobile App Development\",\r\n  \"term\": \"fall-24\",\r\n  \"instructor_id\": {{instructor1_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "7. create 3rd course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"course3_id\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"ECE\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(271);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Digital Logic Design\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor1_id'));\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"ECE\",\r\n  \"number\": 271,\r\n  \"title\": \"Digital Logic Design\",\r\n  \"term\": \"fall-24\",\r\n  \"instructor_id\": {{instructor1_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "8. create 4th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"course4_id\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"AI\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(534);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Machine Learning\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor2_id'));\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"AI\",\r\n  \"number\": 534,\r\n  \"title\": \"Machine Learning\",\r\n  \"term\": \"fall-24\",\r\n  \"instructor_id\": {{instructor2_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "9. get instructor 1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"an instructor has either 4 or 5 properties\", function(){",
									"    const respJSON = pm.response.json()",
									"    pm.expect(Object.keys(respJSON).length).to.be.within(4,5)",
									"    pm.expect(respJSON['id']).to.equal(pm.environment.get('instructor1_id'));",
									"    pm.expect(respJSON['sub']).to.equal(pm.environment.get('instructor1_sub'));",
									"    pm.expect(respJSON['role']).to.equal('instructor');",
									"    pm.expect(Object.keys(respJSON).includes('courses')).to.be.true;",
									"})",
									"",
									"pm.test(\"Courses array includes recently created course(s)\", function() {",
									"    const respJSON = pm.response.json();",
									"    const actualCourses = respJSON[\"courses\"];",
									"    const baseURL = pm.environment.get(\"app_url\") + \"/courses/\";",
									"    const expectedCourses = [",
									"        baseURL + pm.environment.get('course1_id'),",
									"        baseURL + pm.environment.get('course2_id'),",
									"        baseURL + pm.environment.get('course3_id')",
									"    ];",
									"",
									"    expectedCourses.forEach(expected => {",
									"        pm.expect(actualCourses).to.include(expected);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{instructor1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{instructor1_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "8. get all courses",
			"item": [
				{
					"name": "1. get courses page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"});\r",
									"\r",
									"const respJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Exactly 3 courses on the page\", function(){\r",
									"   pm.expect(respJSON['courses'].length).to.eq(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Every course has all the required properties\", function(){\r",
									"    const courses = respJSON['courses'];\r",
									"    for (const course of courses){\r",
									"        pm.expect(course).to.have.property(\"id\");\r",
									"        pm.expect(course).to.have.property(\"subject\");\r",
									"        pm.expect(course).to.have.property(\"number\");        \r",
									"        pm.expect(course).to.have.property(\"title\");\r",
									"        pm.expect(course).to.have.property(\"term\");\r",
									"        pm.expect(course).to.have.property(\"instructor_id\");\r",
									"        pm.expect(course[\"self\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/courses/' + course[\"id\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"The next link is correct\", function(){\r",
									"    pm.expect(respJSON['next']).to.be.oneOf([\r",
									"            pm.environment.get(\"app_url\") + '/courses?offset=3&limit=3',\r",
									"            pm.environment.get(\"app_url\") + '/courses?limit=3&offset=3']);\r",
									"});\r",
									"\r",
									"pm.test(\"The courses are sorted by subject\", function(){\r",
									"    const courses = respJSON['courses'];\r",
									"    const subjects = courses.map(x => x['subject']);\r",
									"    console.log(subjects)\r",
									"    let isSorted = true;\r",
									"    for(let i = 0; i < subjects.length -1; i++){\r",
									"        if(subjects[i] > subjects[i+1]){\r",
									"            isSorted = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(isSorted).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "2. get courses 2nd page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"At least 1 course on the page\", function(){\r",
									"   pm.expect(pm.response.json()['courses'].length).to.be.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Every course has all the required properties\", function(){\r",
									"    const courses = pm.response.json()['courses'];\r",
									"    for (const course of courses){\r",
									"        pm.expect(course).to.have.property(\"id\");\r",
									"        pm.expect(course).to.have.property(\"subject\");\r",
									"        pm.expect(course).to.have.property(\"number\");        \r",
									"        pm.expect(course).to.have.property(\"title\");\r",
									"        pm.expect(course).to.have.property(\"term\");\r",
									"        pm.expect(course).to.have.property(\"instructor_id\");\r",
									"        pm.expect(course[\"self\"]).to.eq(\r",
									"            pm.environment.get(\"app_url\") + '/courses/' + course[\"id\"]);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/courses?offset=3&limit=3",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"courses"
							],
							"query": [
								{
									"key": "offset",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9. get a course",
			"item": [
				{
					"name": "1. get course 1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"status code is 200 (0.05 pts)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.05\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid (0.75 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"CS\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(493);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Cloud Application Development\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor1_id'));\r",
									"    points += 0.75\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid (0.15 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"    points += 0.15\r",
									"});\r",
									"\r",
									"pm.test(\"The response content type is application.json (0.05 pts)\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"    points += 0.05\r",
									"});\r",
									"\r",
									"console.log('******* Get a course Test 1 points = ' + points);\r",
									"console.log('******* Get a course Tests current points = ' + points);\r",
									"pm.environment.set(\"points_course_get\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "2. get course 2 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"\r",
									"pm.test(\"content is valid (0.75 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"CS\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(492);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Mobile App Development\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor1_id'));\r",
									"    points += 0.75\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid (0.25 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"    points += 0.25\r",
									"});\r",
									"\r",
									"console.log('******* Get a course Test 4 points = ' + points);\r",
									"let points_course_get = pm.environment.get('points_course_get') + points;\r",
									"console.log('******* Get a course Tests current points = ' + points_course_get);\r",
									"pm.environment.set(\"points_course_get\", points_course_get);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/courses/{{course2_id}}"
					},
					"response": []
				},
				{
					"name": "3. get course 3 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"\r",
									"pm.test(\"content is valid (0.75 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"ECE\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(271);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Digital Logic Design\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor1_id'));\r",
									"    points += 0.75\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid (0.25 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"    points += 0.25\r",
									"});\r",
									"\r",
									"console.log('******* Get a course Test 3 points = ' + points);\r",
									"let points_course_get = pm.environment.get('points_course_get') + points;\r",
									"console.log('******* Get a course Tests current points = ' + points_course_get);\r",
									"pm.environment.set(\"points_course_get\", points_course_get);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/courses/{{course3_id}}"
					},
					"response": []
				},
				{
					"name": "4. get course 4 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"\r",
									"pm.test(\"content is valid (0.75 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"AI\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(534);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Machine Learning\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor2_id'));\r",
									"    points += 0.75\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid (0.25 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"    points += 0.25\r",
									"});\r",
									"\r",
									"console.log('******* Get a course Test 4 points = ' + points);\r",
									"let points_course_get = pm.environment.get('points_course_get') + points;\r",
									"console.log('******* Get a course Tests current points = ' + points_course_get);\r",
									"pm.environment.set(\"points_course_get\", points_course_get);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/courses/{{course4_id}}"
					},
					"response": []
				},
				{
					"name": "5. get a course 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; \r",
									"\r",
									"pm.test(\"status code is 404 (0.5 pts)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    points += 0.5\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid (0.5 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not found\");\r",
									"    points += 0.5\r",
									"});\r",
									"\r",
									"\r",
									"console.log('******* Get a course Test 5 points = ' + points);\r",
									"let points_course_get = pm.environment.get('points_course_get') + points;\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('Get a course Tests Total points = ' + points_course_get);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_course_get\", points_course_get);\r",
									"\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('1. user login          = ' + pm.environment.get('points_login'));\r",
									"console.log('2. all users           = ' + pm.environment.get('points_all_users'));\r",
									"console.log('3a get a user - basic  = ' + pm.environment.get('points_user_basic'));\r",
									"console.log('3b get a user - avurl  = ' + pm.environment.get('points_user_avatar_url'));\r",
									"console.log('4 create avatar        = ' + pm.environment.get('points_avatar_create'));\r",
									"console.log('5 get user\\'s avatar   = ' + pm.environment.get('points_avatar_get'));\r",
									"console.log('6 delete avatar        = ' + pm.environment.get('points_avatar_delete'));\r",
									"console.log('7 create a course      = ' + pm.environment.get('points_course_create'));\r",
									"console.log('8 get courses          = ' + pm.environment.get('points_courses_get_all'));\r",
									"console.log('9 get a course         = ' + pm.environment.get('points_course_get'));\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/courses/{{invalid_course_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "10. Update a course",
			"item": [
				{
					"name": "1. update one property 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"status code is 200 (0.05 pts)\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.05",
									"});",
									"",
									"pm.test(\"content is valid (0.75 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"CS\");",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(493);",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"new title\");",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor1_id'));",
									"    points += 0.75",
									"});",
									"",
									"pm.test(\"self URL is valid (0.15 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);",
									"    points += 0.15",
									"});",
									"",
									"pm.test(\"The response content type is application.json (0.05 pts)\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.05",
									"});",
									"",
									"console.log('******* Get a course Test 1 points = ' + points);",
									"console.log('******* Get a course Tests current points = ' + points);",
									"pm.environment.set(\"points_course_get\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"new title\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "2. update multiple properties 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"status code is 200 (0.05 pts)\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.05",
									"});",
									"",
									"pm.test(\"content is valid (0.75 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"CS\");",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(493);",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Cloud Application Development\");",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor2_id'));",
									"    points += 0.75",
									"});",
									"",
									"pm.test(\"self URL is valid (0.15 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);",
									"    points += 0.15",
									"});",
									"",
									"pm.test(\"The response content type is application.json (0.05 pts)\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.05",
									"});",
									"",
									"console.log('******* Get a course Test 1 points = ' + points);",
									"console.log('******* Get a course Tests current points = ' + points);",
									"pm.environment.set(\"points_course_get\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Cloud Application Development\",\n    \"instructor_id\": 5710353417633792\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "3. update with empty body 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"status code is 200 (0.05 pts)\", function () {",
									"    pm.response.to.have.status(200);",
									"    points += 0.05",
									"});",
									"",
									"pm.test(\"content is valid (0.75 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"CS\");",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(493);",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Cloud Application Development\");",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor2_id'));",
									"    points += 0.75",
									"});",
									"",
									"pm.test(\"self URL is valid (0.15 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON[\"self\"]).to.eq(",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);",
									"    points += 0.15",
									"});",
									"",
									"pm.test(\"The response content type is application.json (0.05 pts)\", function(){",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');",
									"    points += 0.05",
									"});",
									"",
									"console.log('******* Get a course Test 1 points = ' + points);",
									"console.log('******* Get a course Tests current points = ' + points);",
									"pm.environment.set(\"points_course_get\", points);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "4. update a course 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"status code is 400 (0.5 pts)\", function () {",
									"    pm.response.to.have.status(400);",
									"    points += 0.5",
									"});",
									"",
									"pm.test(\"content is valid (0.5 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is invalid\");",
									"    points += 0.5",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instructor_id\": 5069549128908800\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "5. update a course 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalid_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"new subject\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "6. update a course 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"status code is 403 (0.05 pts)\", function () {",
									"    pm.response.to.have.status(403);",
									"    points += 0.05",
									"});",
									"",
									"pm.test(\"content is valid (0.5 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You don't have permission on this resource\");",
									"    points += 0.5",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{instructor1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"new subject\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "7. update a course 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0; ",
									"",
									"pm.test(\"status code is 403 (0.05 pts)\", function () {",
									"    pm.response.to.have.status(403);",
									"    points += 0.05",
									"});",
									"",
									"pm.test(\"content is valid (0.5 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You don't have permission on this resource\");",
									"    points += 0.5",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"new subject\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/1234"
					},
					"response": []
				}
			]
		},
		{
			"name": "11a, b. Delete a course",
			"item": [
				{
					"name": "1. get course 1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200 (0.05 pts)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    \r",
									"pm.environment.set(\"course1_instructor\", pm.response.json()[\"instructor_id\"]); \r",
									"\r",
									"pm.test(\"The response content type is application.json (0.05 pts)\", function(){\r",
									"    pm.expect(pm.response.contentInfo().contentType).to.eq('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "2. delete a course 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"response has no body\", function() {",
									"    pm.expect(pm.response.text()).to.eql(\"\");",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "3. get course 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404 (0.5 pts)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"content is valid (0.5 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/courses/{{course1_id}}"
					},
					"response": []
				},
				{
					"name": "4. get enrollment 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 403 (0.5 pts)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"content is valid (0.5 pts)\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You don't have permission on this resource\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/courses/{{course1_id}}/students"
					},
					"response": []
				},
				{
					"name": "4. get instructor 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200 (0.5 pts)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"courses field no longer contains deleted course\", function () {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(pm.response.json()[\"courses\"]).to.not.include(pm.environment.get(\"course1_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{course1_instructor}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "12, 11c. Update enrollment in a course",
			"item": [
				{
					"name": "1. create 5th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"course5_id\", pm.response.json()[\"id\"]);\r",
									"\r",
									"let points = 0;\r",
									"\r",
									"pm.test(\"status code is 201 (0.1 pts)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    points += 0.1\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid (0.8 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"MATH\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(101);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Introduction to Maths\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor2_id'));\r",
									"    points += 0.8\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid (0.1 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"    points += 0.1\r",
									"});\r",
									"\r",
									"console.log('******* Create a course Test 8 points = ' + points);\r",
									"let points_course_create = pm.environment.get('points_course_create') + points;\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('Create a course Tests Total points = ' + points_course_create);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_course_create\", points_course_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"MATH\",\r\n  \"number\": 101,\r\n  \"title\": \"Introduction to Maths\",\r\n  \"term\": \"fall-24\",\r\n  \"instructor_id\": {{instructor2_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "2. add students successfully 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response body is empty\", function() {",
									"    pm.expect(pm.response.text()).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [\n    5069549128908800,\n    5071211717459968,\n    5632499082330112,\n    5636645067948032\n],\n\"remove\": [\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "3. remove students successfully 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response body is empty\", function() {",
									"    pm.expect(pm.response.text()).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [],\n\"remove\": [\n    5069549128908800,\n    5071211717459968\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "4. add and remove students successfully 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response body is empty\", function() {",
									"    pm.expect(pm.response.text()).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [5069549128908800],\n\"remove\": [\n    5632499082330112,\n    5636645067948032\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "5. update enrollment 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalid_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [\n    5071211717459968,\n    5632499082330112,\n    5636645067948032\n],\n\"remove\": [\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "6. update enrollment 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"response body is empty\", function() {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You don't have permission on this resource\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [\n    5071211717459968,\n    5632499082330112,\n    5636645067948032\n],\n\"remove\": [\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "7. update enrollment 403 invalid course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"response body is empty\", function() {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You don't have permission on this resource\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [\n    5071211717459968,\n    5632499082330112,\n    5636645067948032\n],\n\"remove\": [\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/1234/students"
					},
					"response": []
				},
				{
					"name": "8. update enrollment 409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"response body is empty\", function() {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Enrollment data is invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [\n    5071211717459968\n],\n\"remove\": [\n    5071211717459968\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "9. update enrollment 409 non-student id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"response body is empty\", function() {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Enrollment data is invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [\n    5644004762845184\n],\n\"remove\": [\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "10. update enrollment 409 non-student id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"response body is empty\", function() {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Enrollment data is invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [\n],\n\"remove\": [\n    5644004762845184\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "11. get student1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0;\r",
									"\r",
									"pm.test(\"200 status code (0.25 pts)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.25\r",
									"});\r",
									"\r",
									"pm.test(\"a student has either 4 or 5 properties (0.75 pts)\", function(){\r",
									"    const respJSON = pm.response.json()\r",
									"    pm.expect(Object.keys(respJSON).length).to.be.within(4,5);\r",
									"    pm.expect(respJSON['id']).to.equal(pm.environment.get('student1_id'));\r",
									"    pm.expect(respJSON['sub']).to.equal(pm.environment.get('student1_sub'));\r",
									"    pm.expect(respJSON['role']).to.equal('student');\r",
									"    pm.expect(Object.keys(respJSON).includes('courses')).to.be.true;\r",
									"    const courseId = String(pm.environment.get(\"course5_id\"));\r",
									"\r",
									"    // Ensure at least one course URL ends with the expected ID\r",
									"    const match = respJSON['courses'].some(url => url.endsWith(courseId));\r",
									"\r",
									"    pm.expect(match, `courses should include URL ending in ${courseId}`).to.be.true;\r",
									"    points += 0.75;\r",
									"})\r",
									"\r",
									"console.log('******* Get a user - basic Test 3 points = ' + points);\r",
									"let points_user_basic = pm.environment.get('points_user_basic') + points;\r",
									"console.log('******* Users - Basic Tests current points = ' + points_user_basic);\r",
									"pm.environment.set(\"points_user_basic\", points_user_basic);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}"
					},
					"response": []
				},
				{
					"name": "12. delete course_5 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"response has no body\", function() {",
									"    pm.expect(pm.response.text()).to.eql(\"\");",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{app_url}}/courses/{{course5_id}}"
					},
					"response": []
				},
				{
					"name": "13. get student1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let points = 0;\r",
									"\r",
									"pm.test(\"200 status code (0.25 pts)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    points += 0.25\r",
									"});\r",
									"\r",
									"pm.test(\"a student has either 4 or 5 properties (0.75 pts)\", function(){\r",
									"    const respJSON = pm.response.json()\r",
									"    pm.expect(Object.keys(respJSON).length).to.be.within(4,5);\r",
									"    pm.expect(respJSON['id']).to.equal(pm.environment.get('student1_id'));\r",
									"    pm.expect(respJSON['sub']).to.equal(pm.environment.get('student1_sub'));\r",
									"    pm.expect(respJSON['role']).to.equal('student');\r",
									"    pm.expect(Object.keys(respJSON).includes('courses')).to.be.true;\r",
									"    const courseId = String(pm.environment.get(\"course5_id\"));\r",
									"    const courseIds = respJSON['courses'].map(url => url.split('/').pop());\r",
									"\r",
									"    pm.expect(courseIds).to.not.include(courseId);\r",
									"    points += 0.75;\r",
									"})\r",
									"\r",
									"console.log('******* Get a user - basic Test 3 points = ' + points);\r",
									"let points_user_basic = pm.environment.get('points_user_basic') + points;\r",
									"console.log('******* Users - Basic Tests current points = ' + points_user_basic);\r",
									"pm.environment.set(\"points_user_basic\", points_user_basic);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{student1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{app_url}}/users/{{student1_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "13, 10. Get enrollment in a course",
			"item": [
				{
					"name": "1. create 5th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"course5_id\", pm.response.json()[\"id\"]);\r",
									"\r",
									"let points = 0;\r",
									"\r",
									"pm.test(\"status code is 201 (0.1 pts)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    points += 0.1\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid (0.8 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(pm.response.json()[\"subject\"]).to.eq(\"MATH\");\r",
									"    pm.expect(pm.response.json()[\"number\"]).to.eq(101);\r",
									"    pm.expect(pm.response.json()[\"title\"]).to.eq(\"Introduction to Maths\");\r",
									"    pm.expect(pm.response.json()[\"term\"]).to.eq(\"fall-24\");\r",
									"    pm.expect(pm.response.json()[\"instructor_id\"]).to.eq(pm.environment.get('instructor2_id'));\r",
									"    points += 0.8\r",
									"});\r",
									"\r",
									"pm.test(\"self URL is valid (0.1 pts)\", function () {\r",
									"    const respJSON = pm.response.json();\r",
									"    pm.expect(respJSON[\"self\"]).to.eq(\r",
									"        pm.environment.get(\"app_url\") + '/courses/' + respJSON[\"id\"]);\r",
									"    points += 0.1\r",
									"});\r",
									"\r",
									"console.log('******* Create a course Test 8 points = ' + points);\r",
									"let points_course_create = pm.environment.get('points_course_create') + points;\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log('Create a course Tests Total points = ' + points_course_create);\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++');\r",
									"pm.environment.set(\"points_course_create\", points_course_create);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subject\": \"MATH\",\r\n  \"number\": 101,\r\n  \"title\": \"Introduction to Maths\",\r\n  \"term\": \"fall-24\",\r\n  \"instructor_id\": {{instructor2_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses"
					},
					"response": []
				},
				{
					"name": "2. add students successfully 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response body is empty\", function() {",
									"    pm.expect(pm.response.text()).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"add\": [\n    5069549128908800,\n    5071211717459968,\n    5632499082330112,\n    5636645067948032\n],\n\"remove\": [\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "3. Admin retrieves enrolled students 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response boy to be a list of student IDs\", function(){",
									"    const respJSON = pm.response.json();",
									"    pm.expect(Array.isArray(respJSON)).to.be.true;",
									"    const expectedIDs = [",
									"        5069549128908800,",
									"        5071211717459968,",
									"        5632499082330112,",
									"        5636645067948032",
									"    ];",
									"    pm.expect(respJSON).to.have.deep.members(expectedIDs);",
									"});",
									"",
									"pm.test(\"Response has content-Type: application/json\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin1_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				},
				{
					"name": "4. Instructor of the course retrieves enrolled students 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response boy to be a list of student IDs\", function(){",
									"    const respJSON = pm.response.json();",
									"    pm.expect(Array.isArray(respJSON)).to.be.true;",
									"    const expectedIDs = [",
									"        5069549128908800,",
									"        5071211717459968,",
									"        5632499082330112,",
									"        5636645067948032",
									"    ];",
									"    pm.expect(respJSON).to.have.deep.members(expectedIDs);",
									"});",
									"",
									"pm.test(\"Response has content-Type: application/json\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{instructor2_jwt}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{app_url}}/courses/{{course5_id}}/students"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"Object.prototype.get_sub = (jwt) => JSON.parse((Buffer.from(jwt.split('.')[1], 'base64').toString('ascii'))).sub;"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}